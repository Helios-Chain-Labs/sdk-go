// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goadesign_goagen_helios_explorer_rpc.proto

package helios_explorer_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliosExplorerRPCClient is the client API for HeliosExplorerRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliosExplorerRPCClient interface {
	// GetAccountTxs returns tranctions involving in an account based upon params.
	GetAccountTxs(ctx context.Context, in *GetAccountTxsRequest, opts ...grpc.CallOption) (*GetAccountTxsResponse, error)
	// GetContractTxs returns contract-related transactions
	GetContractTxs(ctx context.Context, in *GetContractTxsRequest, opts ...grpc.CallOption) (*GetContractTxsResponse, error)
	// GetContractTxs returns contract-related transactions
	GetContractTxsV2(ctx context.Context, in *GetContractTxsV2Request, opts ...grpc.CallOption) (*GetContractTxsV2Response, error)
	// GetBlocks returns blocks based upon the request params
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	// GetBlock returns block based upon the height or hash
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// GetValidators returns validators on the active chain
	GetValidators(ctx context.Context, in *GetValidatorsRequest, opts ...grpc.CallOption) (*GetValidatorsResponse, error)
	// GetValidator returns validator information on the active chain
	GetValidator(ctx context.Context, in *GetValidatorRequest, opts ...grpc.CallOption) (*GetValidatorResponse, error)
	// GetValidatorUptime returns validator uptime information on the active chain
	GetValidatorUptime(ctx context.Context, in *GetValidatorUptimeRequest, opts ...grpc.CallOption) (*GetValidatorUptimeResponse, error)
	// GetTxs returns transactions based upon the request params
	GetTxs(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error)
	// GetTxByTxHash returns certain transaction information by its tx hash.
	GetTxByTxHash(ctx context.Context, in *GetTxByTxHashRequest, opts ...grpc.CallOption) (*GetTxByTxHashResponse, error)
	// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
	// request params
	GetPeggyDepositTxs(ctx context.Context, in *GetPeggyDepositTxsRequest, opts ...grpc.CallOption) (*GetPeggyDepositTxsResponse, error)
	// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
	// the request params
	GetPeggyWithdrawalTxs(ctx context.Context, in *GetPeggyWithdrawalTxsRequest, opts ...grpc.CallOption) (*GetPeggyWithdrawalTxsResponse, error)
	// GetIBCTransferTxs returns the ibc transfer transactions based upon the
	// request params
	GetIBCTransferTxs(ctx context.Context, in *GetIBCTransferTxsRequest, opts ...grpc.CallOption) (*GetIBCTransferTxsResponse, error)
	// GetWasmCodes lists all stored code
	GetWasmCodes(ctx context.Context, in *GetWasmCodesRequest, opts ...grpc.CallOption) (*GetWasmCodesResponse, error)
	// GetWasmCodeById list cosmwasm code infor by ID
	GetWasmCodeByID(ctx context.Context, in *GetWasmCodeByIDRequest, opts ...grpc.CallOption) (*GetWasmCodeByIDResponse, error)
	// GetWasmContracts lists all contracts
	GetWasmContracts(ctx context.Context, in *GetWasmContractsRequest, opts ...grpc.CallOption) (*GetWasmContractsResponse, error)
	// GetWasmContractByAddress list cosmwasm contract info by its address
	GetWasmContractByAddress(ctx context.Context, in *GetWasmContractByAddressRequest, opts ...grpc.CallOption) (*GetWasmContractByAddressResponse, error)
	// GetCw20Balance lists all cw20 balances of an helios account
	GetCw20Balance(ctx context.Context, in *GetCw20BalanceRequest, opts ...grpc.CallOption) (*GetCw20BalanceResponse, error)
	// Request relayers infos by marketIDs. If no ids are provided, all market with
	// associated relayers are returned
	Relayers(ctx context.Context, in *RelayersRequest, opts ...grpc.CallOption) (*RelayersResponse, error)
	// GetBankTransfers returns bank transfers.
	GetBankTransfers(ctx context.Context, in *GetBankTransfersRequest, opts ...grpc.CallOption) (*GetBankTransfersResponse, error)
	// StreamTxs returns transactions based upon the request params
	StreamTxs(ctx context.Context, in *StreamTxsRequest, opts ...grpc.CallOption) (HeliosExplorerRPC_StreamTxsClient, error)
	// StreamBlocks returns the latest blocks
	StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (HeliosExplorerRPC_StreamBlocksClient, error)
}

type heliosExplorerRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliosExplorerRPCClient(cc grpc.ClientConnInterface) HeliosExplorerRPCClient {
	return &heliosExplorerRPCClient{cc}
}

func (c *heliosExplorerRPCClient) GetAccountTxs(ctx context.Context, in *GetAccountTxsRequest, opts ...grpc.CallOption) (*GetAccountTxsResponse, error) {
	out := new(GetAccountTxsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetAccountTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetContractTxs(ctx context.Context, in *GetContractTxsRequest, opts ...grpc.CallOption) (*GetContractTxsResponse, error) {
	out := new(GetContractTxsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetContractTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetContractTxsV2(ctx context.Context, in *GetContractTxsV2Request, opts ...grpc.CallOption) (*GetContractTxsV2Response, error) {
	out := new(GetContractTxsV2Response)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetContractTxsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetValidators(ctx context.Context, in *GetValidatorsRequest, opts ...grpc.CallOption) (*GetValidatorsResponse, error) {
	out := new(GetValidatorsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetValidator(ctx context.Context, in *GetValidatorRequest, opts ...grpc.CallOption) (*GetValidatorResponse, error) {
	out := new(GetValidatorResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetValidatorUptime(ctx context.Context, in *GetValidatorUptimeRequest, opts ...grpc.CallOption) (*GetValidatorUptimeResponse, error) {
	out := new(GetValidatorUptimeResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetValidatorUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetTxs(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error) {
	out := new(GetTxsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetTxByTxHash(ctx context.Context, in *GetTxByTxHashRequest, opts ...grpc.CallOption) (*GetTxByTxHashResponse, error) {
	out := new(GetTxByTxHashResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetTxByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetPeggyDepositTxs(ctx context.Context, in *GetPeggyDepositTxsRequest, opts ...grpc.CallOption) (*GetPeggyDepositTxsResponse, error) {
	out := new(GetPeggyDepositTxsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetPeggyDepositTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetPeggyWithdrawalTxs(ctx context.Context, in *GetPeggyWithdrawalTxsRequest, opts ...grpc.CallOption) (*GetPeggyWithdrawalTxsResponse, error) {
	out := new(GetPeggyWithdrawalTxsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetPeggyWithdrawalTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetIBCTransferTxs(ctx context.Context, in *GetIBCTransferTxsRequest, opts ...grpc.CallOption) (*GetIBCTransferTxsResponse, error) {
	out := new(GetIBCTransferTxsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetIBCTransferTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetWasmCodes(ctx context.Context, in *GetWasmCodesRequest, opts ...grpc.CallOption) (*GetWasmCodesResponse, error) {
	out := new(GetWasmCodesResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetWasmCodeByID(ctx context.Context, in *GetWasmCodeByIDRequest, opts ...grpc.CallOption) (*GetWasmCodeByIDResponse, error) {
	out := new(GetWasmCodeByIDResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmCodeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetWasmContracts(ctx context.Context, in *GetWasmContractsRequest, opts ...grpc.CallOption) (*GetWasmContractsResponse, error) {
	out := new(GetWasmContractsResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetWasmContractByAddress(ctx context.Context, in *GetWasmContractByAddressRequest, opts ...grpc.CallOption) (*GetWasmContractByAddressResponse, error) {
	out := new(GetWasmContractByAddressResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmContractByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetCw20Balance(ctx context.Context, in *GetCw20BalanceRequest, opts ...grpc.CallOption) (*GetCw20BalanceResponse, error) {
	out := new(GetCw20BalanceResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetCw20Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) Relayers(ctx context.Context, in *RelayersRequest, opts ...grpc.CallOption) (*RelayersResponse, error) {
	out := new(RelayersResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/Relayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) GetBankTransfers(ctx context.Context, in *GetBankTransfersRequest, opts ...grpc.CallOption) (*GetBankTransfersResponse, error) {
	out := new(GetBankTransfersResponse)
	err := c.cc.Invoke(ctx, "/helios_explorer_rpc.HeliosExplorerRPC/GetBankTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosExplorerRPCClient) StreamTxs(ctx context.Context, in *StreamTxsRequest, opts ...grpc.CallOption) (HeliosExplorerRPC_StreamTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosExplorerRPC_ServiceDesc.Streams[0], "/helios_explorer_rpc.HeliosExplorerRPC/StreamTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &heliosExplorerRPCStreamTxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosExplorerRPC_StreamTxsClient interface {
	Recv() (*StreamTxsResponse, error)
	grpc.ClientStream
}

type heliosExplorerRPCStreamTxsClient struct {
	grpc.ClientStream
}

func (x *heliosExplorerRPCStreamTxsClient) Recv() (*StreamTxsResponse, error) {
	m := new(StreamTxsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *heliosExplorerRPCClient) StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (HeliosExplorerRPC_StreamBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosExplorerRPC_ServiceDesc.Streams[1], "/helios_explorer_rpc.HeliosExplorerRPC/StreamBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &heliosExplorerRPCStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosExplorerRPC_StreamBlocksClient interface {
	Recv() (*StreamBlocksResponse, error)
	grpc.ClientStream
}

type heliosExplorerRPCStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *heliosExplorerRPCStreamBlocksClient) Recv() (*StreamBlocksResponse, error) {
	m := new(StreamBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeliosExplorerRPCServer is the server API for HeliosExplorerRPC service.
// All implementations must embed UnimplementedHeliosExplorerRPCServer
// for forward compatibility
type HeliosExplorerRPCServer interface {
	// GetAccountTxs returns tranctions involving in an account based upon params.
	GetAccountTxs(context.Context, *GetAccountTxsRequest) (*GetAccountTxsResponse, error)
	// GetContractTxs returns contract-related transactions
	GetContractTxs(context.Context, *GetContractTxsRequest) (*GetContractTxsResponse, error)
	// GetContractTxs returns contract-related transactions
	GetContractTxsV2(context.Context, *GetContractTxsV2Request) (*GetContractTxsV2Response, error)
	// GetBlocks returns blocks based upon the request params
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	// GetBlock returns block based upon the height or hash
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// GetValidators returns validators on the active chain
	GetValidators(context.Context, *GetValidatorsRequest) (*GetValidatorsResponse, error)
	// GetValidator returns validator information on the active chain
	GetValidator(context.Context, *GetValidatorRequest) (*GetValidatorResponse, error)
	// GetValidatorUptime returns validator uptime information on the active chain
	GetValidatorUptime(context.Context, *GetValidatorUptimeRequest) (*GetValidatorUptimeResponse, error)
	// GetTxs returns transactions based upon the request params
	GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error)
	// GetTxByTxHash returns certain transaction information by its tx hash.
	GetTxByTxHash(context.Context, *GetTxByTxHashRequest) (*GetTxByTxHashResponse, error)
	// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
	// request params
	GetPeggyDepositTxs(context.Context, *GetPeggyDepositTxsRequest) (*GetPeggyDepositTxsResponse, error)
	// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
	// the request params
	GetPeggyWithdrawalTxs(context.Context, *GetPeggyWithdrawalTxsRequest) (*GetPeggyWithdrawalTxsResponse, error)
	// GetIBCTransferTxs returns the ibc transfer transactions based upon the
	// request params
	GetIBCTransferTxs(context.Context, *GetIBCTransferTxsRequest) (*GetIBCTransferTxsResponse, error)
	// GetWasmCodes lists all stored code
	GetWasmCodes(context.Context, *GetWasmCodesRequest) (*GetWasmCodesResponse, error)
	// GetWasmCodeById list cosmwasm code infor by ID
	GetWasmCodeByID(context.Context, *GetWasmCodeByIDRequest) (*GetWasmCodeByIDResponse, error)
	// GetWasmContracts lists all contracts
	GetWasmContracts(context.Context, *GetWasmContractsRequest) (*GetWasmContractsResponse, error)
	// GetWasmContractByAddress list cosmwasm contract info by its address
	GetWasmContractByAddress(context.Context, *GetWasmContractByAddressRequest) (*GetWasmContractByAddressResponse, error)
	// GetCw20Balance lists all cw20 balances of an helios account
	GetCw20Balance(context.Context, *GetCw20BalanceRequest) (*GetCw20BalanceResponse, error)
	// Request relayers infos by marketIDs. If no ids are provided, all market with
	// associated relayers are returned
	Relayers(context.Context, *RelayersRequest) (*RelayersResponse, error)
	// GetBankTransfers returns bank transfers.
	GetBankTransfers(context.Context, *GetBankTransfersRequest) (*GetBankTransfersResponse, error)
	// StreamTxs returns transactions based upon the request params
	StreamTxs(*StreamTxsRequest, HeliosExplorerRPC_StreamTxsServer) error
	// StreamBlocks returns the latest blocks
	StreamBlocks(*StreamBlocksRequest, HeliosExplorerRPC_StreamBlocksServer) error
	mustEmbedUnimplementedHeliosExplorerRPCServer()
}

// UnimplementedHeliosExplorerRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHeliosExplorerRPCServer struct {
}

func (UnimplementedHeliosExplorerRPCServer) GetAccountTxs(context.Context, *GetAccountTxsRequest) (*GetAccountTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetContractTxs(context.Context, *GetContractTxsRequest) (*GetContractTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetContractTxsV2(context.Context, *GetContractTxsV2Request) (*GetContractTxsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractTxsV2 not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetValidators(context.Context, *GetValidatorsRequest) (*GetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetValidator(context.Context, *GetValidatorRequest) (*GetValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidator not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetValidatorUptime(context.Context, *GetValidatorUptimeRequest) (*GetValidatorUptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorUptime not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetTxByTxHash(context.Context, *GetTxByTxHashRequest) (*GetTxByTxHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByTxHash not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetPeggyDepositTxs(context.Context, *GetPeggyDepositTxsRequest) (*GetPeggyDepositTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeggyDepositTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetPeggyWithdrawalTxs(context.Context, *GetPeggyWithdrawalTxsRequest) (*GetPeggyWithdrawalTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeggyWithdrawalTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetIBCTransferTxs(context.Context, *GetIBCTransferTxsRequest) (*GetIBCTransferTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIBCTransferTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetWasmCodes(context.Context, *GetWasmCodesRequest) (*GetWasmCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasmCodes not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetWasmCodeByID(context.Context, *GetWasmCodeByIDRequest) (*GetWasmCodeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasmCodeByID not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetWasmContracts(context.Context, *GetWasmContractsRequest) (*GetWasmContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasmContracts not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetWasmContractByAddress(context.Context, *GetWasmContractByAddressRequest) (*GetWasmContractByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWasmContractByAddress not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetCw20Balance(context.Context, *GetCw20BalanceRequest) (*GetCw20BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCw20Balance not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) Relayers(context.Context, *RelayersRequest) (*RelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relayers not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) GetBankTransfers(context.Context, *GetBankTransfersRequest) (*GetBankTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankTransfers not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) StreamTxs(*StreamTxsRequest, HeliosExplorerRPC_StreamTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTxs not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) StreamBlocks(*StreamBlocksRequest, HeliosExplorerRPC_StreamBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedHeliosExplorerRPCServer) mustEmbedUnimplementedHeliosExplorerRPCServer() {}

// UnsafeHeliosExplorerRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliosExplorerRPCServer will
// result in compilation errors.
type UnsafeHeliosExplorerRPCServer interface {
	mustEmbedUnimplementedHeliosExplorerRPCServer()
}

func RegisterHeliosExplorerRPCServer(s grpc.ServiceRegistrar, srv HeliosExplorerRPCServer) {
	s.RegisterService(&HeliosExplorerRPC_ServiceDesc, srv)
}

func _HeliosExplorerRPC_GetAccountTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetAccountTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetAccountTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetAccountTxs(ctx, req.(*GetAccountTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetContractTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetContractTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetContractTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetContractTxs(ctx, req.(*GetContractTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetContractTxsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractTxsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetContractTxsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetContractTxsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetContractTxsV2(ctx, req.(*GetContractTxsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetValidators(ctx, req.(*GetValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetValidator(ctx, req.(*GetValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetValidatorUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorUptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetValidatorUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetValidatorUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetValidatorUptime(ctx, req.(*GetValidatorUptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetTxs(ctx, req.(*GetTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetTxByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxByTxHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetTxByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetTxByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetTxByTxHash(ctx, req.(*GetTxByTxHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetPeggyDepositTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeggyDepositTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetPeggyDepositTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetPeggyDepositTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetPeggyDepositTxs(ctx, req.(*GetPeggyDepositTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetPeggyWithdrawalTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeggyWithdrawalTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetPeggyWithdrawalTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetPeggyWithdrawalTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetPeggyWithdrawalTxs(ctx, req.(*GetPeggyWithdrawalTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetIBCTransferTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIBCTransferTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetIBCTransferTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetIBCTransferTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetIBCTransferTxs(ctx, req.(*GetIBCTransferTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetWasmCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasmCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetWasmCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetWasmCodes(ctx, req.(*GetWasmCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetWasmCodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasmCodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetWasmCodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmCodeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetWasmCodeByID(ctx, req.(*GetWasmCodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetWasmContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasmContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetWasmContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetWasmContracts(ctx, req.(*GetWasmContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetWasmContractByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWasmContractByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetWasmContractByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetWasmContractByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetWasmContractByAddress(ctx, req.(*GetWasmContractByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetCw20Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCw20BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetCw20Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetCw20Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetCw20Balance(ctx, req.(*GetCw20BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_Relayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).Relayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/Relayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).Relayers(ctx, req.(*RelayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_GetBankTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosExplorerRPCServer).GetBankTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_explorer_rpc.HeliosExplorerRPC/GetBankTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosExplorerRPCServer).GetBankTransfers(ctx, req.(*GetBankTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosExplorerRPC_StreamTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosExplorerRPCServer).StreamTxs(m, &heliosExplorerRPCStreamTxsServer{stream})
}

type HeliosExplorerRPC_StreamTxsServer interface {
	Send(*StreamTxsResponse) error
	grpc.ServerStream
}

type heliosExplorerRPCStreamTxsServer struct {
	grpc.ServerStream
}

func (x *heliosExplorerRPCStreamTxsServer) Send(m *StreamTxsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosExplorerRPC_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosExplorerRPCServer).StreamBlocks(m, &heliosExplorerRPCStreamBlocksServer{stream})
}

type HeliosExplorerRPC_StreamBlocksServer interface {
	Send(*StreamBlocksResponse) error
	grpc.ServerStream
}

type heliosExplorerRPCStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *heliosExplorerRPCStreamBlocksServer) Send(m *StreamBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HeliosExplorerRPC_ServiceDesc is the grpc.ServiceDesc for HeliosExplorerRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliosExplorerRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helios_explorer_rpc.HeliosExplorerRPC",
	HandlerType: (*HeliosExplorerRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountTxs",
			Handler:    _HeliosExplorerRPC_GetAccountTxs_Handler,
		},
		{
			MethodName: "GetContractTxs",
			Handler:    _HeliosExplorerRPC_GetContractTxs_Handler,
		},
		{
			MethodName: "GetContractTxsV2",
			Handler:    _HeliosExplorerRPC_GetContractTxsV2_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _HeliosExplorerRPC_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _HeliosExplorerRPC_GetBlock_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _HeliosExplorerRPC_GetValidators_Handler,
		},
		{
			MethodName: "GetValidator",
			Handler:    _HeliosExplorerRPC_GetValidator_Handler,
		},
		{
			MethodName: "GetValidatorUptime",
			Handler:    _HeliosExplorerRPC_GetValidatorUptime_Handler,
		},
		{
			MethodName: "GetTxs",
			Handler:    _HeliosExplorerRPC_GetTxs_Handler,
		},
		{
			MethodName: "GetTxByTxHash",
			Handler:    _HeliosExplorerRPC_GetTxByTxHash_Handler,
		},
		{
			MethodName: "GetPeggyDepositTxs",
			Handler:    _HeliosExplorerRPC_GetPeggyDepositTxs_Handler,
		},
		{
			MethodName: "GetPeggyWithdrawalTxs",
			Handler:    _HeliosExplorerRPC_GetPeggyWithdrawalTxs_Handler,
		},
		{
			MethodName: "GetIBCTransferTxs",
			Handler:    _HeliosExplorerRPC_GetIBCTransferTxs_Handler,
		},
		{
			MethodName: "GetWasmCodes",
			Handler:    _HeliosExplorerRPC_GetWasmCodes_Handler,
		},
		{
			MethodName: "GetWasmCodeByID",
			Handler:    _HeliosExplorerRPC_GetWasmCodeByID_Handler,
		},
		{
			MethodName: "GetWasmContracts",
			Handler:    _HeliosExplorerRPC_GetWasmContracts_Handler,
		},
		{
			MethodName: "GetWasmContractByAddress",
			Handler:    _HeliosExplorerRPC_GetWasmContractByAddress_Handler,
		},
		{
			MethodName: "GetCw20Balance",
			Handler:    _HeliosExplorerRPC_GetCw20Balance_Handler,
		},
		{
			MethodName: "Relayers",
			Handler:    _HeliosExplorerRPC_Relayers_Handler,
		},
		{
			MethodName: "GetBankTransfers",
			Handler:    _HeliosExplorerRPC_GetBankTransfers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTxs",
			Handler:       _HeliosExplorerRPC_StreamTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBlocks",
			Handler:       _HeliosExplorerRPC_StreamBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goadesign_goagen_helios_explorer_rpc.proto",
}
