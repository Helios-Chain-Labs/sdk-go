// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goadesign_goagen_helios_insurance_rpc.proto

package helios_insurance_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliosInsuranceRPCClient is the client API for HeliosInsuranceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliosInsuranceRPCClient interface {
	// Funds lists all insurance funds.
	Funds(ctx context.Context, in *FundsRequest, opts ...grpc.CallOption) (*FundsResponse, error)
	// Funds returns an insurance fund for a given insurance fund token denom.
	Fund(ctx context.Context, in *FundRequest, opts ...grpc.CallOption) (*FundResponse, error)
	// PendingRedemptions lists all pending redemptions according to a filter
	Redemptions(ctx context.Context, in *RedemptionsRequest, opts ...grpc.CallOption) (*RedemptionsResponse, error)
}

type heliosInsuranceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliosInsuranceRPCClient(cc grpc.ClientConnInterface) HeliosInsuranceRPCClient {
	return &heliosInsuranceRPCClient{cc}
}

func (c *heliosInsuranceRPCClient) Funds(ctx context.Context, in *FundsRequest, opts ...grpc.CallOption) (*FundsResponse, error) {
	out := new(FundsResponse)
	err := c.cc.Invoke(ctx, "/helios_insurance_rpc.HeliosInsuranceRPC/Funds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosInsuranceRPCClient) Fund(ctx context.Context, in *FundRequest, opts ...grpc.CallOption) (*FundResponse, error) {
	out := new(FundResponse)
	err := c.cc.Invoke(ctx, "/helios_insurance_rpc.HeliosInsuranceRPC/Fund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosInsuranceRPCClient) Redemptions(ctx context.Context, in *RedemptionsRequest, opts ...grpc.CallOption) (*RedemptionsResponse, error) {
	out := new(RedemptionsResponse)
	err := c.cc.Invoke(ctx, "/helios_insurance_rpc.HeliosInsuranceRPC/Redemptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeliosInsuranceRPCServer is the server API for HeliosInsuranceRPC service.
// All implementations must embed UnimplementedHeliosInsuranceRPCServer
// for forward compatibility
type HeliosInsuranceRPCServer interface {
	// Funds lists all insurance funds.
	Funds(context.Context, *FundsRequest) (*FundsResponse, error)
	// Funds returns an insurance fund for a given insurance fund token denom.
	Fund(context.Context, *FundRequest) (*FundResponse, error)
	// PendingRedemptions lists all pending redemptions according to a filter
	Redemptions(context.Context, *RedemptionsRequest) (*RedemptionsResponse, error)
	mustEmbedUnimplementedHeliosInsuranceRPCServer()
}

// UnimplementedHeliosInsuranceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHeliosInsuranceRPCServer struct {
}

func (UnimplementedHeliosInsuranceRPCServer) Funds(context.Context, *FundsRequest) (*FundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Funds not implemented")
}
func (UnimplementedHeliosInsuranceRPCServer) Fund(context.Context, *FundRequest) (*FundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fund not implemented")
}
func (UnimplementedHeliosInsuranceRPCServer) Redemptions(context.Context, *RedemptionsRequest) (*RedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redemptions not implemented")
}
func (UnimplementedHeliosInsuranceRPCServer) mustEmbedUnimplementedHeliosInsuranceRPCServer() {}

// UnsafeHeliosInsuranceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliosInsuranceRPCServer will
// result in compilation errors.
type UnsafeHeliosInsuranceRPCServer interface {
	mustEmbedUnimplementedHeliosInsuranceRPCServer()
}

func RegisterHeliosInsuranceRPCServer(s grpc.ServiceRegistrar, srv HeliosInsuranceRPCServer) {
	s.RegisterService(&HeliosInsuranceRPC_ServiceDesc, srv)
}

func _HeliosInsuranceRPC_Funds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosInsuranceRPCServer).Funds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_insurance_rpc.HeliosInsuranceRPC/Funds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosInsuranceRPCServer).Funds(ctx, req.(*FundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosInsuranceRPC_Fund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosInsuranceRPCServer).Fund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_insurance_rpc.HeliosInsuranceRPC/Fund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosInsuranceRPCServer).Fund(ctx, req.(*FundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosInsuranceRPC_Redemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosInsuranceRPCServer).Redemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_insurance_rpc.HeliosInsuranceRPC/Redemptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosInsuranceRPCServer).Redemptions(ctx, req.(*RedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeliosInsuranceRPC_ServiceDesc is the grpc.ServiceDesc for HeliosInsuranceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliosInsuranceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helios_insurance_rpc.HeliosInsuranceRPC",
	HandlerType: (*HeliosInsuranceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Funds",
			Handler:    _HeliosInsuranceRPC_Funds_Handler,
		},
		{
			MethodName: "Fund",
			Handler:    _HeliosInsuranceRPC_Fund_Handler,
		},
		{
			MethodName: "Redemptions",
			Handler:    _HeliosInsuranceRPC_Redemptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goadesign_goagen_helios_insurance_rpc.proto",
}
