// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _spot_exchange_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliosSpotExchangeRPCClient is the client API for HeliosSpotExchangeRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliosSpotExchangeRPCClient interface {
	// Get a list of Spot Markets
	Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error)
	// Get details of a single spot market
	Market(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketResponse, error)
	// Stream live updates of selected spot markets
	StreamMarkets(ctx context.Context, in *StreamMarketsRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamMarketsClient, error)
	// Orderbook of a Spot Market
	OrderbookV2(ctx context.Context, in *OrderbookV2Request, opts ...grpc.CallOption) (*OrderbookV2Response, error)
	// Orderbook of Spot Markets
	OrderbooksV2(ctx context.Context, in *OrderbooksV2Request, opts ...grpc.CallOption) (*OrderbooksV2Response, error)
	// Stream live snapshot updates of selected spot market orderbook
	StreamOrderbookV2(ctx context.Context, in *StreamOrderbookV2Request, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrderbookV2Client, error)
	// Stream live level updates of selected spot market orderbook
	StreamOrderbookUpdate(ctx context.Context, in *StreamOrderbookUpdateRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrderbookUpdateClient, error)
	// Orders of a Spot Market
	Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	// Stream updates to individual orders of a Spot Market
	StreamOrders(ctx context.Context, in *StreamOrdersRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrdersClient, error)
	// Trades of a Spot Market
	Trades(ctx context.Context, in *TradesRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	// Stream newly executed trades from Spot Market
	StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamTradesClient, error)
	// Trades of a Spot Market
	TradesV2(ctx context.Context, in *TradesV2Request, opts ...grpc.CallOption) (*TradesV2Response, error)
	// Stream newly executed trades from Spot Market
	StreamTradesV2(ctx context.Context, in *StreamTradesV2Request, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamTradesV2Client, error)
	// List orders posted from this subaccount
	SubaccountOrdersList(ctx context.Context, in *SubaccountOrdersListRequest, opts ...grpc.CallOption) (*SubaccountOrdersListResponse, error)
	// List trades executed by this subaccount
	SubaccountTradesList(ctx context.Context, in *SubaccountTradesListRequest, opts ...grpc.CallOption) (*SubaccountTradesListResponse, error)
	// Lists history orders posted from this subaccount
	OrdersHistory(ctx context.Context, in *OrdersHistoryRequest, opts ...grpc.CallOption) (*OrdersHistoryResponse, error)
	// Stream updates to historical orders of a spot Market
	StreamOrdersHistory(ctx context.Context, in *StreamOrdersHistoryRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrdersHistoryClient, error)
	// Get historical atomic swaps
	AtomicSwapHistory(ctx context.Context, in *AtomicSwapHistoryRequest, opts ...grpc.CallOption) (*AtomicSwapHistoryResponse, error)
}

type SpotExchangeRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliosSpotExchangeRPCClient(cc grpc.ClientConnInterface) HeliosSpotExchangeRPCClient {
	return &SpotExchangeRPCClient{cc}
}

func (c *SpotExchangeRPCClient) Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) Market(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketResponse, error) {
	out := new(MarketResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Market", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) StreamMarkets(ctx context.Context, in *StreamMarketsRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamMarketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[0], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamMarkets", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamMarketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamMarketsClient interface {
	Recv() (*StreamMarketsResponse, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamMarketsClient struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamMarketsClient) Recv() (*StreamMarketsResponse, error) {
	m := new(StreamMarketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) OrderbookV2(ctx context.Context, in *OrderbookV2Request, opts ...grpc.CallOption) (*OrderbookV2Response, error) {
	out := new(OrderbookV2Response)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/OrderbookV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) OrderbooksV2(ctx context.Context, in *OrderbooksV2Request, opts ...grpc.CallOption) (*OrderbooksV2Response, error) {
	out := new(OrderbooksV2Response)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/OrderbooksV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) StreamOrderbookV2(ctx context.Context, in *StreamOrderbookV2Request, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrderbookV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[1], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamOrderbookV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamOrderbookV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamOrderbookV2Client interface {
	Recv() (*StreamOrderbookV2Response, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamOrderbookV2Client struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamOrderbookV2Client) Recv() (*StreamOrderbookV2Response, error) {
	m := new(StreamOrderbookV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) StreamOrderbookUpdate(ctx context.Context, in *StreamOrderbookUpdateRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrderbookUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[2], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamOrderbookUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamOrderbookUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamOrderbookUpdateClient interface {
	Recv() (*StreamOrderbookUpdateResponse, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamOrderbookUpdateClient struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamOrderbookUpdateClient) Recv() (*StreamOrderbookUpdateResponse, error) {
	m := new(StreamOrderbookUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Orders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) StreamOrders(ctx context.Context, in *StreamOrdersRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[3], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamOrdersClient interface {
	Recv() (*StreamOrdersResponse, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamOrdersClient struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamOrdersClient) Recv() (*StreamOrdersResponse, error) {
	m := new(StreamOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) Trades(ctx context.Context, in *TradesRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Trades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[4], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamTradesClient interface {
	Recv() (*StreamTradesResponse, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamTradesClient struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamTradesClient) Recv() (*StreamTradesResponse, error) {
	m := new(StreamTradesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) TradesV2(ctx context.Context, in *TradesV2Request, opts ...grpc.CallOption) (*TradesV2Response, error) {
	out := new(TradesV2Response)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/TradesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) StreamTradesV2(ctx context.Context, in *StreamTradesV2Request, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamTradesV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[5], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamTradesV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamTradesV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamTradesV2Client interface {
	Recv() (*StreamTradesV2Response, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamTradesV2Client struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamTradesV2Client) Recv() (*StreamTradesV2Response, error) {
	m := new(StreamTradesV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) SubaccountOrdersList(ctx context.Context, in *SubaccountOrdersListRequest, opts ...grpc.CallOption) (*SubaccountOrdersListResponse, error) {
	out := new(SubaccountOrdersListResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/SubaccountOrdersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) SubaccountTradesList(ctx context.Context, in *SubaccountTradesListRequest, opts ...grpc.CallOption) (*SubaccountTradesListResponse, error) {
	out := new(SubaccountTradesListResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/SubaccountTradesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) OrdersHistory(ctx context.Context, in *OrdersHistoryRequest, opts ...grpc.CallOption) (*OrdersHistoryResponse, error) {
	out := new(OrdersHistoryResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/OrdersHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *SpotExchangeRPCClient) StreamOrdersHistory(ctx context.Context, in *StreamOrdersHistoryRequest, opts ...grpc.CallOption) (HeliosSpotExchangeRPC_StreamOrdersHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosSpotExchangeRPC_ServiceDesc.Streams[6], "/_spot_exchange_rpc.HeliosSpotExchangeRPC/StreamOrdersHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &SpotExchangeRPCStreamOrdersHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosSpotExchangeRPC_StreamOrdersHistoryClient interface {
	Recv() (*StreamOrdersHistoryResponse, error)
	grpc.ClientStream
}

type SpotExchangeRPCStreamOrdersHistoryClient struct {
	grpc.ClientStream
}

func (x *SpotExchangeRPCStreamOrdersHistoryClient) Recv() (*StreamOrdersHistoryResponse, error) {
	m := new(StreamOrdersHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *SpotExchangeRPCClient) AtomicSwapHistory(ctx context.Context, in *AtomicSwapHistoryRequest, opts ...grpc.CallOption) (*AtomicSwapHistoryResponse, error) {
	out := new(AtomicSwapHistoryResponse)
	err := c.cc.Invoke(ctx, "/_spot_exchange_rpc.HeliosSpotExchangeRPC/AtomicSwapHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeliosSpotExchangeRPCServer is the server API for HeliosSpotExchangeRPC service.
// All implementations must embed UnimplementedHeliosSpotExchangeRPCServer
// for forward compatibility
type HeliosSpotExchangeRPCServer interface {
	// Get a list of Spot Markets
	Markets(context.Context, *MarketsRequest) (*MarketsResponse, error)
	// Get details of a single spot market
	Market(context.Context, *MarketRequest) (*MarketResponse, error)
	// Stream live updates of selected spot markets
	StreamMarkets(*StreamMarketsRequest, HeliosSpotExchangeRPC_StreamMarketsServer) error
	// Orderbook of a Spot Market
	OrderbookV2(context.Context, *OrderbookV2Request) (*OrderbookV2Response, error)
	// Orderbook of Spot Markets
	OrderbooksV2(context.Context, *OrderbooksV2Request) (*OrderbooksV2Response, error)
	// Stream live snapshot updates of selected spot market orderbook
	StreamOrderbookV2(*StreamOrderbookV2Request, HeliosSpotExchangeRPC_StreamOrderbookV2Server) error
	// Stream live level updates of selected spot market orderbook
	StreamOrderbookUpdate(*StreamOrderbookUpdateRequest, HeliosSpotExchangeRPC_StreamOrderbookUpdateServer) error
	// Orders of a Spot Market
	Orders(context.Context, *OrdersRequest) (*OrdersResponse, error)
	// Stream updates to individual orders of a Spot Market
	StreamOrders(*StreamOrdersRequest, HeliosSpotExchangeRPC_StreamOrdersServer) error
	// Trades of a Spot Market
	Trades(context.Context, *TradesRequest) (*TradesResponse, error)
	// Stream newly executed trades from Spot Market
	StreamTrades(*StreamTradesRequest, HeliosSpotExchangeRPC_StreamTradesServer) error
	// Trades of a Spot Market
	TradesV2(context.Context, *TradesV2Request) (*TradesV2Response, error)
	// Stream newly executed trades from Spot Market
	StreamTradesV2(*StreamTradesV2Request, HeliosSpotExchangeRPC_StreamTradesV2Server) error
	// List orders posted from this subaccount
	SubaccountOrdersList(context.Context, *SubaccountOrdersListRequest) (*SubaccountOrdersListResponse, error)
	// List trades executed by this subaccount
	SubaccountTradesList(context.Context, *SubaccountTradesListRequest) (*SubaccountTradesListResponse, error)
	// Lists history orders posted from this subaccount
	OrdersHistory(context.Context, *OrdersHistoryRequest) (*OrdersHistoryResponse, error)
	// Stream updates to historical orders of a spot Market
	StreamOrdersHistory(*StreamOrdersHistoryRequest, HeliosSpotExchangeRPC_StreamOrdersHistoryServer) error
	// Get historical atomic swaps
	AtomicSwapHistory(context.Context, *AtomicSwapHistoryRequest) (*AtomicSwapHistoryResponse, error)
	mustEmbedUnimplementedHeliosSpotExchangeRPCServer()
}

// UnimplementedHeliosSpotExchangeRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHeliosSpotExchangeRPCServer struct {
}

func (UnimplementedHeliosSpotExchangeRPCServer) Markets(context.Context, *MarketsRequest) (*MarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) Market(context.Context, *MarketRequest) (*MarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Market not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamMarkets(*StreamMarketsRequest, HeliosSpotExchangeRPC_StreamMarketsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMarkets not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) OrderbookV2(context.Context, *OrderbookV2Request) (*OrderbookV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderbookV2 not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) OrderbooksV2(context.Context, *OrderbooksV2Request) (*OrderbooksV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderbooksV2 not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamOrderbookV2(*StreamOrderbookV2Request, HeliosSpotExchangeRPC_StreamOrderbookV2Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderbookV2 not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamOrderbookUpdate(*StreamOrderbookUpdateRequest, HeliosSpotExchangeRPC_StreamOrderbookUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderbookUpdate not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) Orders(context.Context, *OrdersRequest) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamOrders(*StreamOrdersRequest, HeliosSpotExchangeRPC_StreamOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) Trades(context.Context, *TradesRequest) (*TradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trades not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamTrades(*StreamTradesRequest, HeliosSpotExchangeRPC_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) TradesV2(context.Context, *TradesV2Request) (*TradesV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesV2 not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamTradesV2(*StreamTradesV2Request, HeliosSpotExchangeRPC_StreamTradesV2Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamTradesV2 not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) SubaccountOrdersList(context.Context, *SubaccountOrdersListRequest) (*SubaccountOrdersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrdersList not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) SubaccountTradesList(context.Context, *SubaccountTradesListRequest) (*SubaccountTradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountTradesList not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) OrdersHistory(context.Context, *OrdersHistoryRequest) (*OrdersHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersHistory not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) StreamOrdersHistory(*StreamOrdersHistoryRequest, HeliosSpotExchangeRPC_StreamOrdersHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrdersHistory not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) AtomicSwapHistory(context.Context, *AtomicSwapHistoryRequest) (*AtomicSwapHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtomicSwapHistory not implemented")
}
func (UnimplementedHeliosSpotExchangeRPCServer) mustEmbedUnimplementedHeliosSpotExchangeRPCServer() {
}

// UnsafeHeliosSpotExchangeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliosSpotExchangeRPCServer will
// result in compilation errors.
type UnsafeHeliosSpotExchangeRPCServer interface {
	mustEmbedUnimplementedHeliosSpotExchangeRPCServer()
}

func RegisterHeliosSpotExchangeRPCServer(s grpc.ServiceRegistrar, srv HeliosSpotExchangeRPCServer) {
	s.RegisterService(&HeliosSpotExchangeRPC_ServiceDesc, srv)
}

func _HeliosSpotExchangeRPC_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).Markets(ctx, req.(*MarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_Market_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).Market(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Market",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).Market(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_StreamMarkets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMarketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamMarkets(m, &SpotExchangeRPCStreamMarketsServer{stream})
}

type HeliosSpotExchangeRPC_StreamMarketsServer interface {
	Send(*StreamMarketsResponse) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamMarketsServer struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamMarketsServer) Send(m *StreamMarketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_OrderbookV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderbookV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).OrderbookV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/OrderbookV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).OrderbookV2(ctx, req.(*OrderbookV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_OrderbooksV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderbooksV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).OrderbooksV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/OrderbooksV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).OrderbooksV2(ctx, req.(*OrderbooksV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_StreamOrderbookV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderbookV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamOrderbookV2(m, &SpotExchangeRPCStreamOrderbookV2Server{stream})
}

type HeliosSpotExchangeRPC_StreamOrderbookV2Server interface {
	Send(*StreamOrderbookV2Response) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamOrderbookV2Server struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamOrderbookV2Server) Send(m *StreamOrderbookV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_StreamOrderbookUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderbookUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamOrderbookUpdate(m, &SpotExchangeRPCStreamOrderbookUpdateServer{stream})
}

type HeliosSpotExchangeRPC_StreamOrderbookUpdateServer interface {
	Send(*StreamOrderbookUpdateResponse) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamOrderbookUpdateServer struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamOrderbookUpdateServer) Send(m *StreamOrderbookUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Orders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).Orders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamOrders(m, &SpotExchangeRPCStreamOrdersServer{stream})
}

type HeliosSpotExchangeRPC_StreamOrdersServer interface {
	Send(*StreamOrdersResponse) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamOrdersServer struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamOrdersServer) Send(m *StreamOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_Trades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).Trades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/Trades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).Trades(ctx, req.(*TradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamTrades(m, &SpotExchangeRPCStreamTradesServer{stream})
}

type HeliosSpotExchangeRPC_StreamTradesServer interface {
	Send(*StreamTradesResponse) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamTradesServer struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamTradesServer) Send(m *StreamTradesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_TradesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).TradesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/TradesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).TradesV2(ctx, req.(*TradesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_StreamTradesV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamTradesV2(m, &SpotExchangeRPCStreamTradesV2Server{stream})
}

type HeliosSpotExchangeRPC_StreamTradesV2Server interface {
	Send(*StreamTradesV2Response) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamTradesV2Server struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamTradesV2Server) Send(m *StreamTradesV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_SubaccountOrdersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountOrdersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).SubaccountOrdersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/SubaccountOrdersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).SubaccountOrdersList(ctx, req.(*SubaccountOrdersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_SubaccountTradesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountTradesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).SubaccountTradesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/SubaccountTradesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).SubaccountTradesList(ctx, req.(*SubaccountTradesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_OrdersHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).OrdersHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/OrdersHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).OrdersHistory(ctx, req.(*OrdersHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosSpotExchangeRPC_StreamOrdersHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrdersHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosSpotExchangeRPCServer).StreamOrdersHistory(m, &SpotExchangeRPCStreamOrdersHistoryServer{stream})
}

type HeliosSpotExchangeRPC_StreamOrdersHistoryServer interface {
	Send(*StreamOrdersHistoryResponse) error
	grpc.ServerStream
}

type SpotExchangeRPCStreamOrdersHistoryServer struct {
	grpc.ServerStream
}

func (x *SpotExchangeRPCStreamOrdersHistoryServer) Send(m *StreamOrdersHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosSpotExchangeRPC_AtomicSwapHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtomicSwapHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosSpotExchangeRPCServer).AtomicSwapHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_spot_exchange_rpc.HeliosSpotExchangeRPC/AtomicSwapHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosSpotExchangeRPCServer).AtomicSwapHistory(ctx, req.(*AtomicSwapHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeliosSpotExchangeRPC_ServiceDesc is the grpc.ServiceDesc for HeliosSpotExchangeRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliosSpotExchangeRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "_spot_exchange_rpc.HeliosSpotExchangeRPC",
	HandlerType: (*HeliosSpotExchangeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Markets",
			Handler:    _HeliosSpotExchangeRPC_Markets_Handler,
		},
		{
			MethodName: "Market",
			Handler:    _HeliosSpotExchangeRPC_Market_Handler,
		},
		{
			MethodName: "OrderbookV2",
			Handler:    _HeliosSpotExchangeRPC_OrderbookV2_Handler,
		},
		{
			MethodName: "OrderbooksV2",
			Handler:    _HeliosSpotExchangeRPC_OrderbooksV2_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _HeliosSpotExchangeRPC_Orders_Handler,
		},
		{
			MethodName: "Trades",
			Handler:    _HeliosSpotExchangeRPC_Trades_Handler,
		},
		{
			MethodName: "TradesV2",
			Handler:    _HeliosSpotExchangeRPC_TradesV2_Handler,
		},
		{
			MethodName: "SubaccountOrdersList",
			Handler:    _HeliosSpotExchangeRPC_SubaccountOrdersList_Handler,
		},
		{
			MethodName: "SubaccountTradesList",
			Handler:    _HeliosSpotExchangeRPC_SubaccountTradesList_Handler,
		},
		{
			MethodName: "OrdersHistory",
			Handler:    _HeliosSpotExchangeRPC_OrdersHistory_Handler,
		},
		{
			MethodName: "AtomicSwapHistory",
			Handler:    _HeliosSpotExchangeRPC_AtomicSwapHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMarkets",
			Handler:       _HeliosSpotExchangeRPC_StreamMarkets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderbookV2",
			Handler:       _HeliosSpotExchangeRPC_StreamOrderbookV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderbookUpdate",
			Handler:       _HeliosSpotExchangeRPC_StreamOrderbookUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrders",
			Handler:       _HeliosSpotExchangeRPC_StreamOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTrades",
			Handler:       _HeliosSpotExchangeRPC_StreamTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTradesV2",
			Handler:       _HeliosSpotExchangeRPC_StreamTradesV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrdersHistory",
			Handler:       _HeliosSpotExchangeRPC_StreamOrdersHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "_spot_exchange_rpc.proto",
}
