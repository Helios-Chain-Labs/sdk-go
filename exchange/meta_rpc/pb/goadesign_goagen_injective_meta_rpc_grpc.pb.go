// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goadesign_goagen_helios_meta_rpc.proto

package helios_meta_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliosMetaRPCClient is the client API for HeliosMetaRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliosMetaRPCClient interface {
	// Endpoint for checking server health.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Returns helios-exchange version.
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Gets connection info
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Stream keepalive, if server exits, a shutdown event will be sent over this
	// channel.
	StreamKeepalive(ctx context.Context, in *StreamKeepaliveRequest, opts ...grpc.CallOption) (HeliosMetaRPC_StreamKeepaliveClient, error)
	// Get tokens metadata. Can be filtered by denom
	TokenMetadata(ctx context.Context, in *TokenMetadataRequest, opts ...grpc.CallOption) (*TokenMetadataResponse, error)
}

type heliosMetaRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliosMetaRPCClient(cc grpc.ClientConnInterface) HeliosMetaRPCClient {
	return &heliosMetaRPCClient{cc}
}

func (c *heliosMetaRPCClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/helios_meta_rpc.HeliosMetaRPC/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosMetaRPCClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/helios_meta_rpc.HeliosMetaRPC/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosMetaRPCClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/helios_meta_rpc.HeliosMetaRPC/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heliosMetaRPCClient) StreamKeepalive(ctx context.Context, in *StreamKeepaliveRequest, opts ...grpc.CallOption) (HeliosMetaRPC_StreamKeepaliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosMetaRPC_ServiceDesc.Streams[0], "/helios_meta_rpc.HeliosMetaRPC/StreamKeepalive", opts...)
	if err != nil {
		return nil, err
	}
	x := &heliosMetaRPCStreamKeepaliveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosMetaRPC_StreamKeepaliveClient interface {
	Recv() (*StreamKeepaliveResponse, error)
	grpc.ClientStream
}

type heliosMetaRPCStreamKeepaliveClient struct {
	grpc.ClientStream
}

func (x *heliosMetaRPCStreamKeepaliveClient) Recv() (*StreamKeepaliveResponse, error) {
	m := new(StreamKeepaliveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *heliosMetaRPCClient) TokenMetadata(ctx context.Context, in *TokenMetadataRequest, opts ...grpc.CallOption) (*TokenMetadataResponse, error) {
	out := new(TokenMetadataResponse)
	err := c.cc.Invoke(ctx, "/helios_meta_rpc.HeliosMetaRPC/TokenMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeliosMetaRPCServer is the server API for HeliosMetaRPC service.
// All implementations must embed UnimplementedHeliosMetaRPCServer
// for forward compatibility
type HeliosMetaRPCServer interface {
	// Endpoint for checking server health.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Returns helios-exchange version.
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Gets connection info
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Stream keepalive, if server exits, a shutdown event will be sent over this
	// channel.
	StreamKeepalive(*StreamKeepaliveRequest, HeliosMetaRPC_StreamKeepaliveServer) error
	// Get tokens metadata. Can be filtered by denom
	TokenMetadata(context.Context, *TokenMetadataRequest) (*TokenMetadataResponse, error)
	mustEmbedUnimplementedHeliosMetaRPCServer()
}

// UnimplementedHeliosMetaRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHeliosMetaRPCServer struct {
}

func (UnimplementedHeliosMetaRPCServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHeliosMetaRPCServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedHeliosMetaRPCServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedHeliosMetaRPCServer) StreamKeepalive(*StreamKeepaliveRequest, HeliosMetaRPC_StreamKeepaliveServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamKeepalive not implemented")
}
func (UnimplementedHeliosMetaRPCServer) TokenMetadata(context.Context, *TokenMetadataRequest) (*TokenMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenMetadata not implemented")
}
func (UnimplementedHeliosMetaRPCServer) mustEmbedUnimplementedHeliosMetaRPCServer() {}

// UnsafeHeliosMetaRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliosMetaRPCServer will
// result in compilation errors.
type UnsafeHeliosMetaRPCServer interface {
	mustEmbedUnimplementedHeliosMetaRPCServer()
}

func RegisterHeliosMetaRPCServer(s grpc.ServiceRegistrar, srv HeliosMetaRPCServer) {
	s.RegisterService(&HeliosMetaRPC_ServiceDesc, srv)
}

func _HeliosMetaRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosMetaRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_meta_rpc.HeliosMetaRPC/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosMetaRPCServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosMetaRPC_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosMetaRPCServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_meta_rpc.HeliosMetaRPC/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosMetaRPCServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosMetaRPC_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosMetaRPCServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_meta_rpc.HeliosMetaRPC/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosMetaRPCServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosMetaRPC_StreamKeepalive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamKeepaliveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosMetaRPCServer).StreamKeepalive(m, &heliosMetaRPCStreamKeepaliveServer{stream})
}

type HeliosMetaRPC_StreamKeepaliveServer interface {
	Send(*StreamKeepaliveResponse) error
	grpc.ServerStream
}

type heliosMetaRPCStreamKeepaliveServer struct {
	grpc.ServerStream
}

func (x *heliosMetaRPCStreamKeepaliveServer) Send(m *StreamKeepaliveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosMetaRPC_TokenMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosMetaRPCServer).TokenMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helios_meta_rpc.HeliosMetaRPC/TokenMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosMetaRPCServer).TokenMetadata(ctx, req.(*TokenMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeliosMetaRPC_ServiceDesc is the grpc.ServiceDesc for HeliosMetaRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliosMetaRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helios_meta_rpc.HeliosMetaRPC",
	HandlerType: (*HeliosMetaRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HeliosMetaRPC_Ping_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _HeliosMetaRPC_Version_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _HeliosMetaRPC_Info_Handler,
		},
		{
			MethodName: "TokenMetadata",
			Handler:    _HeliosMetaRPC_TokenMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamKeepalive",
			Handler:       _HeliosMetaRPC_StreamKeepalive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "goadesign_goagen_helios_meta_rpc.proto",
}
