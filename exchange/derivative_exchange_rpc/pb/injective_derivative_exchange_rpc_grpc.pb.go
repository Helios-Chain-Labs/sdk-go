// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _derivative_exchange_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliosDerivativeExchangeRPCClient is the client API for HeliosDerivativeExchangeRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliosDerivativeExchangeRPCClient interface {
	// Markets gets a list of Derivative Markets
	Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error)
	// Market gets details of a single derivative market
	Market(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketResponse, error)
	// StreamMarket streams live updates of selected derivative markets
	StreamMarket(ctx context.Context, in *StreamMarketRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamMarketClient, error)
	// BinaryOptionsMarkets gets a list of Binary Options Markets
	BinaryOptionsMarkets(ctx context.Context, in *BinaryOptionsMarketsRequest, opts ...grpc.CallOption) (*BinaryOptionsMarketsResponse, error)
	// BinaryOptionMarket gets details of a single binary options market
	BinaryOptionsMarket(ctx context.Context, in *BinaryOptionsMarketRequest, opts ...grpc.CallOption) (*BinaryOptionsMarketResponse, error)
	// Orderbook gets the Orderbook of a Derivative Market
	OrderbookV2(ctx context.Context, in *OrderbookV2Request, opts ...grpc.CallOption) (*OrderbookV2Response, error)
	// Orderbooks gets the Orderbooks of requested derivative markets
	OrderbooksV2(ctx context.Context, in *OrderbooksV2Request, opts ...grpc.CallOption) (*OrderbooksV2Response, error)
	// Stream live snapshot updates of selected derivative market orderbook
	StreamOrderbookV2(ctx context.Context, in *StreamOrderbookV2Request, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrderbookV2Client, error)
	// Stream live level updates of selected derivative market orderbook
	StreamOrderbookUpdate(ctx context.Context, in *StreamOrderbookUpdateRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrderbookUpdateClient, error)
	// DerivativeLimitOrders gets the limit orders of a derivative Market.
	Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error)
	// Positions gets the positions for a trader.
	Positions(ctx context.Context, in *PositionsRequest, opts ...grpc.CallOption) (*PositionsResponse, error)
	// Positions gets the positions for a trader. V2 removed some redundant fields
	// and had performance improvements
	PositionsV2(ctx context.Context, in *PositionsV2Request, opts ...grpc.CallOption) (*PositionsV2Response, error)
	// LiquidablePositions gets all the liquidable positions.
	LiquidablePositions(ctx context.Context, in *LiquidablePositionsRequest, opts ...grpc.CallOption) (*LiquidablePositionsResponse, error)
	// FundingPayments gets the funding payments for a trader.
	FundingPayments(ctx context.Context, in *FundingPaymentsRequest, opts ...grpc.CallOption) (*FundingPaymentsResponse, error)
	// FundingRates gets the historical funding rates for a market.
	FundingRates(ctx context.Context, in *FundingRatesRequest, opts ...grpc.CallOption) (*FundingRatesResponse, error)
	// StreamPositions streams derivatives position updates.
	StreamPositions(ctx context.Context, in *StreamPositionsRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamPositionsClient, error)
	// StreamOrders streams updates to individual orders of a Derivative Market.
	StreamOrders(ctx context.Context, in *StreamOrdersRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrdersClient, error)
	// Trades gets the trades of a Derivative Market.
	Trades(ctx context.Context, in *TradesRequest, opts ...grpc.CallOption) (*TradesResponse, error)
	// Trades gets the trades of a Derivative Market.
	TradesV2(ctx context.Context, in *TradesV2Request, opts ...grpc.CallOption) (*TradesV2Response, error)
	// StreamTrades streams newly executed trades from Derivative Market.
	StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamTradesClient, error)
	// StreamTrades streams newly executed trades from Derivative Market.
	StreamTradesV2(ctx context.Context, in *StreamTradesV2Request, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamTradesV2Client, error)
	// SubaccountOrdersList lists orders posted from this subaccount.
	SubaccountOrdersList(ctx context.Context, in *SubaccountOrdersListRequest, opts ...grpc.CallOption) (*SubaccountOrdersListResponse, error)
	// SubaccountTradesList gets a list of derivatives trades executed by this
	// subaccount.
	SubaccountTradesList(ctx context.Context, in *SubaccountTradesListRequest, opts ...grpc.CallOption) (*SubaccountTradesListResponse, error)
	// Lists history orders posted from a subaccount
	OrdersHistory(ctx context.Context, in *OrdersHistoryRequest, opts ...grpc.CallOption) (*OrdersHistoryResponse, error)
	// Stream updates to historical orders of a derivative Market
	StreamOrdersHistory(ctx context.Context, in *StreamOrdersHistoryRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrdersHistoryClient, error)
}

type DerivativeExchangeRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliosDerivativeExchangeRPCClient(cc grpc.ClientConnInterface) HeliosDerivativeExchangeRPCClient {
	return &DerivativeExchangeRPCClient{cc}
}

func (c *DerivativeExchangeRPCClient) Markets(ctx context.Context, in *MarketsRequest, opts ...grpc.CallOption) (*MarketsResponse, error) {
	out := new(MarketsResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Markets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) Market(ctx context.Context, in *MarketRequest, opts ...grpc.CallOption) (*MarketResponse, error) {
	out := new(MarketResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Market", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) StreamMarket(ctx context.Context, in *StreamMarketRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamMarketClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[0], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamMarket", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamMarketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamMarketClient interface {
	Recv() (*StreamMarketResponse, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamMarketClient struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamMarketClient) Recv() (*StreamMarketResponse, error) {
	m := new(StreamMarketResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) BinaryOptionsMarkets(ctx context.Context, in *BinaryOptionsMarketsRequest, opts ...grpc.CallOption) (*BinaryOptionsMarketsResponse, error) {
	out := new(BinaryOptionsMarketsResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/BinaryOptionsMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) BinaryOptionsMarket(ctx context.Context, in *BinaryOptionsMarketRequest, opts ...grpc.CallOption) (*BinaryOptionsMarketResponse, error) {
	out := new(BinaryOptionsMarketResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/BinaryOptionsMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) OrderbookV2(ctx context.Context, in *OrderbookV2Request, opts ...grpc.CallOption) (*OrderbookV2Response, error) {
	out := new(OrderbookV2Response)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/OrderbookV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) OrderbooksV2(ctx context.Context, in *OrderbooksV2Request, opts ...grpc.CallOption) (*OrderbooksV2Response, error) {
	out := new(OrderbooksV2Response)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/OrderbooksV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) StreamOrderbookV2(ctx context.Context, in *StreamOrderbookV2Request, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrderbookV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[1], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamOrderbookV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamOrderbookV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamOrderbookV2Client interface {
	Recv() (*StreamOrderbookV2Response, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamOrderbookV2Client struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamOrderbookV2Client) Recv() (*StreamOrderbookV2Response, error) {
	m := new(StreamOrderbookV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) StreamOrderbookUpdate(ctx context.Context, in *StreamOrderbookUpdateRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrderbookUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[2], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamOrderbookUpdate", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamOrderbookUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamOrderbookUpdateClient interface {
	Recv() (*StreamOrderbookUpdateResponse, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamOrderbookUpdateClient struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamOrderbookUpdateClient) Recv() (*StreamOrderbookUpdateResponse, error) {
	m := new(StreamOrderbookUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Orders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) Positions(ctx context.Context, in *PositionsRequest, opts ...grpc.CallOption) (*PositionsResponse, error) {
	out := new(PositionsResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Positions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) PositionsV2(ctx context.Context, in *PositionsV2Request, opts ...grpc.CallOption) (*PositionsV2Response, error) {
	out := new(PositionsV2Response)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/PositionsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) LiquidablePositions(ctx context.Context, in *LiquidablePositionsRequest, opts ...grpc.CallOption) (*LiquidablePositionsResponse, error) {
	out := new(LiquidablePositionsResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/LiquidablePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) FundingPayments(ctx context.Context, in *FundingPaymentsRequest, opts ...grpc.CallOption) (*FundingPaymentsResponse, error) {
	out := new(FundingPaymentsResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/FundingPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) FundingRates(ctx context.Context, in *FundingRatesRequest, opts ...grpc.CallOption) (*FundingRatesResponse, error) {
	out := new(FundingRatesResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/FundingRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) StreamPositions(ctx context.Context, in *StreamPositionsRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[3], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamPositionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamPositionsClient interface {
	Recv() (*StreamPositionsResponse, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamPositionsClient struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamPositionsClient) Recv() (*StreamPositionsResponse, error) {
	m := new(StreamPositionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) StreamOrders(ctx context.Context, in *StreamOrdersRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[4], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamOrdersClient interface {
	Recv() (*StreamOrdersResponse, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamOrdersClient struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamOrdersClient) Recv() (*StreamOrdersResponse, error) {
	m := new(StreamOrdersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) Trades(ctx context.Context, in *TradesRequest, opts ...grpc.CallOption) (*TradesResponse, error) {
	out := new(TradesResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Trades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) TradesV2(ctx context.Context, in *TradesV2Request, opts ...grpc.CallOption) (*TradesV2Response, error) {
	out := new(TradesV2Response)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/TradesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[5], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamTradesClient interface {
	Recv() (*StreamTradesResponse, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamTradesClient struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamTradesClient) Recv() (*StreamTradesResponse, error) {
	m := new(StreamTradesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) StreamTradesV2(ctx context.Context, in *StreamTradesV2Request, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamTradesV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[6], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamTradesV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamTradesV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamTradesV2Client interface {
	Recv() (*StreamTradesV2Response, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamTradesV2Client struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamTradesV2Client) Recv() (*StreamTradesV2Response, error) {
	m := new(StreamTradesV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *DerivativeExchangeRPCClient) SubaccountOrdersList(ctx context.Context, in *SubaccountOrdersListRequest, opts ...grpc.CallOption) (*SubaccountOrdersListResponse, error) {
	out := new(SubaccountOrdersListResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/SubaccountOrdersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) SubaccountTradesList(ctx context.Context, in *SubaccountTradesListRequest, opts ...grpc.CallOption) (*SubaccountTradesListResponse, error) {
	out := new(SubaccountTradesListResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/SubaccountTradesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) OrdersHistory(ctx context.Context, in *OrdersHistoryRequest, opts ...grpc.CallOption) (*OrdersHistoryResponse, error) {
	out := new(OrdersHistoryResponse)
	err := c.cc.Invoke(ctx, "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/OrdersHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *DerivativeExchangeRPCClient) StreamOrdersHistory(ctx context.Context, in *StreamOrdersHistoryRequest, opts ...grpc.CallOption) (HeliosDerivativeExchangeRPC_StreamOrdersHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &HeliosDerivativeExchangeRPC_ServiceDesc.Streams[7], "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/StreamOrdersHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &DerivativeExchangeRPCStreamOrdersHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeliosDerivativeExchangeRPC_StreamOrdersHistoryClient interface {
	Recv() (*StreamOrdersHistoryResponse, error)
	grpc.ClientStream
}

type DerivativeExchangeRPCStreamOrdersHistoryClient struct {
	grpc.ClientStream
}

func (x *DerivativeExchangeRPCStreamOrdersHistoryClient) Recv() (*StreamOrdersHistoryResponse, error) {
	m := new(StreamOrdersHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeliosDerivativeExchangeRPCServer is the server API for HeliosDerivativeExchangeRPC service.
// All implementations must embed UnimplementedHeliosDerivativeExchangeRPCServer
// for forward compatibility
type HeliosDerivativeExchangeRPCServer interface {
	// Markets gets a list of Derivative Markets
	Markets(context.Context, *MarketsRequest) (*MarketsResponse, error)
	// Market gets details of a single derivative market
	Market(context.Context, *MarketRequest) (*MarketResponse, error)
	// StreamMarket streams live updates of selected derivative markets
	StreamMarket(*StreamMarketRequest, HeliosDerivativeExchangeRPC_StreamMarketServer) error
	// BinaryOptionsMarkets gets a list of Binary Options Markets
	BinaryOptionsMarkets(context.Context, *BinaryOptionsMarketsRequest) (*BinaryOptionsMarketsResponse, error)
	// BinaryOptionMarket gets details of a single binary options market
	BinaryOptionsMarket(context.Context, *BinaryOptionsMarketRequest) (*BinaryOptionsMarketResponse, error)
	// Orderbook gets the Orderbook of a Derivative Market
	OrderbookV2(context.Context, *OrderbookV2Request) (*OrderbookV2Response, error)
	// Orderbooks gets the Orderbooks of requested derivative markets
	OrderbooksV2(context.Context, *OrderbooksV2Request) (*OrderbooksV2Response, error)
	// Stream live snapshot updates of selected derivative market orderbook
	StreamOrderbookV2(*StreamOrderbookV2Request, HeliosDerivativeExchangeRPC_StreamOrderbookV2Server) error
	// Stream live level updates of selected derivative market orderbook
	StreamOrderbookUpdate(*StreamOrderbookUpdateRequest, HeliosDerivativeExchangeRPC_StreamOrderbookUpdateServer) error
	// DerivativeLimitOrders gets the limit orders of a derivative Market.
	Orders(context.Context, *OrdersRequest) (*OrdersResponse, error)
	// Positions gets the positions for a trader.
	Positions(context.Context, *PositionsRequest) (*PositionsResponse, error)
	// Positions gets the positions for a trader. V2 removed some redundant fields
	// and had performance improvements
	PositionsV2(context.Context, *PositionsV2Request) (*PositionsV2Response, error)
	// LiquidablePositions gets all the liquidable positions.
	LiquidablePositions(context.Context, *LiquidablePositionsRequest) (*LiquidablePositionsResponse, error)
	// FundingPayments gets the funding payments for a trader.
	FundingPayments(context.Context, *FundingPaymentsRequest) (*FundingPaymentsResponse, error)
	// FundingRates gets the historical funding rates for a market.
	FundingRates(context.Context, *FundingRatesRequest) (*FundingRatesResponse, error)
	// StreamPositions streams derivatives position updates.
	StreamPositions(*StreamPositionsRequest, HeliosDerivativeExchangeRPC_StreamPositionsServer) error
	// StreamOrders streams updates to individual orders of a Derivative Market.
	StreamOrders(*StreamOrdersRequest, HeliosDerivativeExchangeRPC_StreamOrdersServer) error
	// Trades gets the trades of a Derivative Market.
	Trades(context.Context, *TradesRequest) (*TradesResponse, error)
	// Trades gets the trades of a Derivative Market.
	TradesV2(context.Context, *TradesV2Request) (*TradesV2Response, error)
	// StreamTrades streams newly executed trades from Derivative Market.
	StreamTrades(*StreamTradesRequest, HeliosDerivativeExchangeRPC_StreamTradesServer) error
	// StreamTrades streams newly executed trades from Derivative Market.
	StreamTradesV2(*StreamTradesV2Request, HeliosDerivativeExchangeRPC_StreamTradesV2Server) error
	// SubaccountOrdersList lists orders posted from this subaccount.
	SubaccountOrdersList(context.Context, *SubaccountOrdersListRequest) (*SubaccountOrdersListResponse, error)
	// SubaccountTradesList gets a list of derivatives trades executed by this
	// subaccount.
	SubaccountTradesList(context.Context, *SubaccountTradesListRequest) (*SubaccountTradesListResponse, error)
	// Lists history orders posted from a subaccount
	OrdersHistory(context.Context, *OrdersHistoryRequest) (*OrdersHistoryResponse, error)
	// Stream updates to historical orders of a derivative Market
	StreamOrdersHistory(*StreamOrdersHistoryRequest, HeliosDerivativeExchangeRPC_StreamOrdersHistoryServer) error
	mustEmbedUnimplementedHeliosDerivativeExchangeRPCServer()
}

// UnimplementedHeliosDerivativeExchangeRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHeliosDerivativeExchangeRPCServer struct {
}

func (UnimplementedHeliosDerivativeExchangeRPCServer) Markets(context.Context, *MarketsRequest) (*MarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Markets not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) Market(context.Context, *MarketRequest) (*MarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Market not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamMarket(*StreamMarketRequest, HeliosDerivativeExchangeRPC_StreamMarketServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMarket not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) BinaryOptionsMarkets(context.Context, *BinaryOptionsMarketsRequest) (*BinaryOptionsMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BinaryOptionsMarkets not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) BinaryOptionsMarket(context.Context, *BinaryOptionsMarketRequest) (*BinaryOptionsMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BinaryOptionsMarket not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) OrderbookV2(context.Context, *OrderbookV2Request) (*OrderbookV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderbookV2 not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) OrderbooksV2(context.Context, *OrderbooksV2Request) (*OrderbooksV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderbooksV2 not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamOrderbookV2(*StreamOrderbookV2Request, HeliosDerivativeExchangeRPC_StreamOrderbookV2Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderbookV2 not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamOrderbookUpdate(*StreamOrderbookUpdateRequest, HeliosDerivativeExchangeRPC_StreamOrderbookUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderbookUpdate not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) Orders(context.Context, *OrdersRequest) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) Positions(context.Context, *PositionsRequest) (*PositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Positions not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) PositionsV2(context.Context, *PositionsV2Request) (*PositionsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsV2 not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) LiquidablePositions(context.Context, *LiquidablePositionsRequest) (*LiquidablePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidablePositions not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) FundingPayments(context.Context, *FundingPaymentsRequest) (*FundingPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingPayments not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) FundingRates(context.Context, *FundingRatesRequest) (*FundingRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundingRates not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamPositions(*StreamPositionsRequest, HeliosDerivativeExchangeRPC_StreamPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPositions not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamOrders(*StreamOrdersRequest, HeliosDerivativeExchangeRPC_StreamOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) Trades(context.Context, *TradesRequest) (*TradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trades not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) TradesV2(context.Context, *TradesV2Request) (*TradesV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradesV2 not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamTrades(*StreamTradesRequest, HeliosDerivativeExchangeRPC_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamTradesV2(*StreamTradesV2Request, HeliosDerivativeExchangeRPC_StreamTradesV2Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamTradesV2 not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) SubaccountOrdersList(context.Context, *SubaccountOrdersListRequest) (*SubaccountOrdersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrdersList not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) SubaccountTradesList(context.Context, *SubaccountTradesListRequest) (*SubaccountTradesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountTradesList not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) OrdersHistory(context.Context, *OrdersHistoryRequest) (*OrdersHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersHistory not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) StreamOrdersHistory(*StreamOrdersHistoryRequest, HeliosDerivativeExchangeRPC_StreamOrdersHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrdersHistory not implemented")
}
func (UnimplementedHeliosDerivativeExchangeRPCServer) mustEmbedUnimplementedHeliosDerivativeExchangeRPCServer() {
}

// UnsafeHeliosDerivativeExchangeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliosDerivativeExchangeRPCServer will
// result in compilation errors.
type UnsafeHeliosDerivativeExchangeRPCServer interface {
	mustEmbedUnimplementedHeliosDerivativeExchangeRPCServer()
}

func RegisterHeliosDerivativeExchangeRPCServer(s grpc.ServiceRegistrar, srv HeliosDerivativeExchangeRPCServer) {
	s.RegisterService(&HeliosDerivativeExchangeRPC_ServiceDesc, srv)
}

func _HeliosDerivativeExchangeRPC_Markets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).Markets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Markets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).Markets(ctx, req.(*MarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_Market_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).Market(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Market",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).Market(ctx, req.(*MarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_StreamMarket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMarketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamMarket(m, &DerivativeExchangeRPCStreamMarketServer{stream})
}

type HeliosDerivativeExchangeRPC_StreamMarketServer interface {
	Send(*StreamMarketResponse) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamMarketServer struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamMarketServer) Send(m *StreamMarketResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_BinaryOptionsMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOptionsMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).BinaryOptionsMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/BinaryOptionsMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).BinaryOptionsMarkets(ctx, req.(*BinaryOptionsMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_BinaryOptionsMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryOptionsMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).BinaryOptionsMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/BinaryOptionsMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).BinaryOptionsMarket(ctx, req.(*BinaryOptionsMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_OrderbookV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderbookV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).OrderbookV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/OrderbookV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).OrderbookV2(ctx, req.(*OrderbookV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_OrderbooksV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderbooksV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).OrderbooksV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/OrderbooksV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).OrderbooksV2(ctx, req.(*OrderbooksV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_StreamOrderbookV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderbookV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamOrderbookV2(m, &DerivativeExchangeRPCStreamOrderbookV2Server{stream})
}

type HeliosDerivativeExchangeRPC_StreamOrderbookV2Server interface {
	Send(*StreamOrderbookV2Response) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamOrderbookV2Server struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamOrderbookV2Server) Send(m *StreamOrderbookV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_StreamOrderbookUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderbookUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamOrderbookUpdate(m, &DerivativeExchangeRPCStreamOrderbookUpdateServer{stream})
}

type HeliosDerivativeExchangeRPC_StreamOrderbookUpdateServer interface {
	Send(*StreamOrderbookUpdateResponse) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamOrderbookUpdateServer struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamOrderbookUpdateServer) Send(m *StreamOrderbookUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Orders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).Orders(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_Positions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).Positions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Positions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).Positions(ctx, req.(*PositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_PositionsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).PositionsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/PositionsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).PositionsV2(ctx, req.(*PositionsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_LiquidablePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidablePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).LiquidablePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/LiquidablePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).LiquidablePositions(ctx, req.(*LiquidablePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_FundingPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).FundingPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/FundingPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).FundingPayments(ctx, req.(*FundingPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_FundingRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundingRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).FundingRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/FundingRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).FundingRates(ctx, req.(*FundingRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_StreamPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPositionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamPositions(m, &DerivativeExchangeRPCStreamPositionsServer{stream})
}

type HeliosDerivativeExchangeRPC_StreamPositionsServer interface {
	Send(*StreamPositionsResponse) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamPositionsServer struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamPositionsServer) Send(m *StreamPositionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamOrders(m, &DerivativeExchangeRPCStreamOrdersServer{stream})
}

type HeliosDerivativeExchangeRPC_StreamOrdersServer interface {
	Send(*StreamOrdersResponse) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamOrdersServer struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamOrdersServer) Send(m *StreamOrdersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_Trades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).Trades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/Trades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).Trades(ctx, req.(*TradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_TradesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).TradesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/TradesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).TradesV2(ctx, req.(*TradesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamTrades(m, &DerivativeExchangeRPCStreamTradesServer{stream})
}

type HeliosDerivativeExchangeRPC_StreamTradesServer interface {
	Send(*StreamTradesResponse) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamTradesServer struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamTradesServer) Send(m *StreamTradesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_StreamTradesV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamTradesV2(m, &DerivativeExchangeRPCStreamTradesV2Server{stream})
}

type HeliosDerivativeExchangeRPC_StreamTradesV2Server interface {
	Send(*StreamTradesV2Response) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamTradesV2Server struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamTradesV2Server) Send(m *StreamTradesV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _HeliosDerivativeExchangeRPC_SubaccountOrdersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountOrdersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).SubaccountOrdersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/SubaccountOrdersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).SubaccountOrdersList(ctx, req.(*SubaccountOrdersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_SubaccountTradesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountTradesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).SubaccountTradesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/SubaccountTradesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).SubaccountTradesList(ctx, req.(*SubaccountTradesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_OrdersHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosDerivativeExchangeRPCServer).OrdersHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_derivative_exchange_rpc.HeliosDerivativeExchangeRPC/OrdersHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosDerivativeExchangeRPCServer).OrdersHistory(ctx, req.(*OrdersHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeliosDerivativeExchangeRPC_StreamOrdersHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrdersHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeliosDerivativeExchangeRPCServer).StreamOrdersHistory(m, &DerivativeExchangeRPCStreamOrdersHistoryServer{stream})
}

type HeliosDerivativeExchangeRPC_StreamOrdersHistoryServer interface {
	Send(*StreamOrdersHistoryResponse) error
	grpc.ServerStream
}

type DerivativeExchangeRPCStreamOrdersHistoryServer struct {
	grpc.ServerStream
}

func (x *DerivativeExchangeRPCStreamOrdersHistoryServer) Send(m *StreamOrdersHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HeliosDerivativeExchangeRPC_ServiceDesc is the grpc.ServiceDesc for HeliosDerivativeExchangeRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliosDerivativeExchangeRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "_derivative_exchange_rpc.HeliosDerivativeExchangeRPC",
	HandlerType: (*HeliosDerivativeExchangeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Markets",
			Handler:    _HeliosDerivativeExchangeRPC_Markets_Handler,
		},
		{
			MethodName: "Market",
			Handler:    _HeliosDerivativeExchangeRPC_Market_Handler,
		},
		{
			MethodName: "BinaryOptionsMarkets",
			Handler:    _HeliosDerivativeExchangeRPC_BinaryOptionsMarkets_Handler,
		},
		{
			MethodName: "BinaryOptionsMarket",
			Handler:    _HeliosDerivativeExchangeRPC_BinaryOptionsMarket_Handler,
		},
		{
			MethodName: "OrderbookV2",
			Handler:    _HeliosDerivativeExchangeRPC_OrderbookV2_Handler,
		},
		{
			MethodName: "OrderbooksV2",
			Handler:    _HeliosDerivativeExchangeRPC_OrderbooksV2_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _HeliosDerivativeExchangeRPC_Orders_Handler,
		},
		{
			MethodName: "Positions",
			Handler:    _HeliosDerivativeExchangeRPC_Positions_Handler,
		},
		{
			MethodName: "PositionsV2",
			Handler:    _HeliosDerivativeExchangeRPC_PositionsV2_Handler,
		},
		{
			MethodName: "LiquidablePositions",
			Handler:    _HeliosDerivativeExchangeRPC_LiquidablePositions_Handler,
		},
		{
			MethodName: "FundingPayments",
			Handler:    _HeliosDerivativeExchangeRPC_FundingPayments_Handler,
		},
		{
			MethodName: "FundingRates",
			Handler:    _HeliosDerivativeExchangeRPC_FundingRates_Handler,
		},
		{
			MethodName: "Trades",
			Handler:    _HeliosDerivativeExchangeRPC_Trades_Handler,
		},
		{
			MethodName: "TradesV2",
			Handler:    _HeliosDerivativeExchangeRPC_TradesV2_Handler,
		},
		{
			MethodName: "SubaccountOrdersList",
			Handler:    _HeliosDerivativeExchangeRPC_SubaccountOrdersList_Handler,
		},
		{
			MethodName: "SubaccountTradesList",
			Handler:    _HeliosDerivativeExchangeRPC_SubaccountTradesList_Handler,
		},
		{
			MethodName: "OrdersHistory",
			Handler:    _HeliosDerivativeExchangeRPC_OrdersHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMarket",
			Handler:       _HeliosDerivativeExchangeRPC_StreamMarket_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderbookV2",
			Handler:       _HeliosDerivativeExchangeRPC_StreamOrderbookV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderbookUpdate",
			Handler:       _HeliosDerivativeExchangeRPC_StreamOrderbookUpdate_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPositions",
			Handler:       _HeliosDerivativeExchangeRPC_StreamPositions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrders",
			Handler:       _HeliosDerivativeExchangeRPC_StreamOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTrades",
			Handler:       _HeliosDerivativeExchangeRPC_StreamTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTradesV2",
			Handler:       _HeliosDerivativeExchangeRPC_StreamTradesV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrdersHistory",
			Handler:       _HeliosDerivativeExchangeRPC_StreamOrdersHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "_derivative_exchange_rpc.proto",
}
