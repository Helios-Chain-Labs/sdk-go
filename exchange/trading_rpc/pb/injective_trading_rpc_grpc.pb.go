// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _trading_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeliosTradingRPCClient is the client API for HeliosTradingRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeliosTradingRPCClient interface {
	// Lists all trading strategies
	ListTradingStrategies(ctx context.Context, in *ListTradingStrategiesRequest, opts ...grpc.CallOption) (*ListTradingStrategiesResponse, error)
}

type TradingRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewHeliosTradingRPCClient(cc grpc.ClientConnInterface) HeliosTradingRPCClient {
	return &TradingRPCClient{cc}
}

func (c *TradingRPCClient) ListTradingStrategies(ctx context.Context, in *ListTradingStrategiesRequest, opts ...grpc.CallOption) (*ListTradingStrategiesResponse, error) {
	out := new(ListTradingStrategiesResponse)
	err := c.cc.Invoke(ctx, "/_trading_rpc.HeliosTradingRPC/ListTradingStrategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeliosTradingRPCServer is the server API for HeliosTradingRPC service.
// All implementations must embed UnimplementedHeliosTradingRPCServer
// for forward compatibility
type HeliosTradingRPCServer interface {
	// Lists all trading strategies
	ListTradingStrategies(context.Context, *ListTradingStrategiesRequest) (*ListTradingStrategiesResponse, error)
	mustEmbedUnimplementedHeliosTradingRPCServer()
}

// UnimplementedHeliosTradingRPCServer must be embedded to have forward compatible implementations.
type UnimplementedHeliosTradingRPCServer struct {
}

func (UnimplementedHeliosTradingRPCServer) ListTradingStrategies(context.Context, *ListTradingStrategiesRequest) (*ListTradingStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTradingStrategies not implemented")
}
func (UnimplementedHeliosTradingRPCServer) mustEmbedUnimplementedHeliosTradingRPCServer() {}

// UnsafeHeliosTradingRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeliosTradingRPCServer will
// result in compilation errors.
type UnsafeHeliosTradingRPCServer interface {
	mustEmbedUnimplementedHeliosTradingRPCServer()
}

func RegisterHeliosTradingRPCServer(s grpc.ServiceRegistrar, srv HeliosTradingRPCServer) {
	s.RegisterService(&HeliosTradingRPC_ServiceDesc, srv)
}

func _HeliosTradingRPC_ListTradingStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTradingStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeliosTradingRPCServer).ListTradingStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_trading_rpc.HeliosTradingRPC/ListTradingStrategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeliosTradingRPCServer).ListTradingStrategies(ctx, req.(*ListTradingStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeliosTradingRPC_ServiceDesc is the grpc.ServiceDesc for HeliosTradingRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeliosTradingRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "_trading_rpc.HeliosTradingRPC",
	HandlerType: (*HeliosTradingRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTradingStrategies",
			Handler:    _HeliosTradingRPC_ListTradingStrategies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "_trading_rpc.proto",
}
